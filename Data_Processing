#Libraries Import

import os as opx
import cv2 as compv2
import matplotlib.pyplot as mpyplt
import numpy as npcore
from sklearn.model_selection import train_test_split as tnttsplit

#Data Load

defective_casting_pdt_pathh = 'def_front'
good_casting_pdt_pathh  = 'ok_front'

defective_casting_img = opx.listdir(defective_casting_pdt_pathh)
good_casting_img = opx.listdir(good_casting_pdt_pathh)
print(f"Total number of defective casting product images: {len(defective_casting_img)}")
print(f"Total number of non-defective casting product images: {len(good_casting_img)}")

#Data Resize

def initial_data_visuals(folder_path, image_list, num_images=5):
    mpyplt.figure(figsize=(15, 3))
    for c_id in range(num_images):
        castingfile = image_list[c_id]
        castingpath = opx.path.join(folder_path, castingfile)

        product = compv2.imread(castingpath)
        if product is None:
            continue

        grayscaled = compv2.cvtColor(product, compv2.COLOR_BGR2GRAY)
        remeasured = compv2.resize(grayscaled, (224, 224)) 
        mpyplt.subplot(1, num_images, c_id + 1)
        mpyplt.imshow(remeasured, cmap='gray')
        mpyplt.title(castingfile, fontsize=12)
        mpyplt.axis('off')
    mpyplt.show()

initial_data_visuals(defective_casting_pdt_pathh, defective_casting_img)
initial_data_visuals(good_casting_pdt_pathh, good_casting_img)